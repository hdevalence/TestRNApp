#import "PraxMobileBridge.h"
#import <React/RCTBridgeModule.h>

// Import the C header generated by cbindgen
#import "prax_mobile.h"

@implementation PraxMobile

RCT_EXPORT_MODULE();

RCT_EXPORT_METHOD(sum:(NSInteger)a withB:(NSInteger)b
                  resolver:(RCTPromiseResolveBlock)resolve
                  rejecter:(RCTPromiseRejectBlock)reject)
{
    NSInteger result = prax_mobile::sum((int32_t)a, (int32_t)b);
    resolve(@(result));
}

RCT_EXPORT_METHOD(startServer:(RCTPromiseResolveBlock)resolve
                  rejecter:(RCTPromiseRejectBlock)reject)
{
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        bool success = prax_mobile::start_server();
        dispatch_async(dispatch_get_main_queue(), ^{
            if (success) {
                resolve(@"Server started successfully");
            } else {
                reject(@"SERVER_START_FAILED", @"Failed to start server", nil);
            }
        });
    });
}

RCT_EXPORT_METHOD(stopServer:(RCTPromiseResolveBlock)resolve
                  rejecter:(RCTPromiseRejectBlock)reject)
{
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        bool success = prax_mobile::stop_server();
        dispatch_async(dispatch_get_main_queue(), ^{
            if (success) {
                resolve(@"Server stopped successfully");
            } else {
                reject(@"SERVER_STOP_FAILED", @"Failed to stop server", nil);
            }
        });
    });
}

@end
